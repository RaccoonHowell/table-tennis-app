{"version":3,"sources":["components/Header.js","components/Footer.js","components/AddPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","className","AddPlayer","props","state","userInput","players","column1","column2","clicked","playersShuffled","handleUserInput","bind","handleSubmit","handleReset","handlePairs","e","this","setState","target","value","preventDefault","length","halfLength","Math","floor","sort","random","slice","onSubmit","placeholder","type","onChange","maxLength","minLength","map","player","i","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26ac7078.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <h1>Table Tennis Pair Generator</h1>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className=\"copyright\">&copy; Rachel Howell 2020</footer>\n    )\n}\n\nexport default Footer;","import React, {Component} from 'react';\n\nexport class AddPlayer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userInput: '',\n            players: [],\n            column1: [],\n            column2: [],\n            clicked: false,\n            playersShuffled:[],\n        }\n\n        this.handleUserInput = this.handleUserInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handlePairs = this.handlePairs.bind(this);\n    }\n\n    // updates state when user types in input field\n    handleUserInput(e) {\n        this.setState({\n            userInput: e.target.value\n        })\n    }\n\n    // updates player array to add input value on submit\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.userInput.length === 0) {\n            return;\n        }\n\n        this.setState({\n            userInput: '',\n            players: [...this.state.players, this.state.userInput],\n        })\n    }\n\n    // resets page to initial state\n    handleReset() {\n        this.setState({\n            userInput: '',\n            players: [],\n            column1: [],\n            column2: [],\n            playersShuffled: [],\n            clicked: false,\n        })\n    }\n\n    // shuffles the array using Math.random and splits it into 2 arrays using splice\n    handlePairs() {\n        const halfLength = Math.floor(this.state.players.length / 2);\n        \n        const playersShuffled = [...this.state.players];\n\n        this.setState({\n            playersShuffled: playersShuffled.sort(() => Math.random() - 0.5),\n            column1: playersShuffled.slice(0, halfLength),\n            column2: playersShuffled.slice(halfLength, playersShuffled.length),\n            clicked: true,\n        })\n    }\n    \n    render() {\n        const { players } = this.state; \n        \n        const { column1 } = this.state;\n\n        const { clicked } = this.state;\n        \n        return (\n            <>\n                {/* form section */}\n                <form className='form' onSubmit={this.handleSubmit}>\n                    <label>Add an even number of players</label>\n\n                    <input \n                        placeholder='Enter player names here' \n                        type='text' onChange={this.handleUserInput} \n                        value={this.state.userInput}\n                        maxLength='20'\n                        minLength='1'\n                    />\n\n                    <button>Add Player</button>\n                </form>\n                \n                {/* section that displays player names when the array contains at least one item */}\n                <div className='players'>\n                    {players.length > 0 ?\n                        <h2>Players</h2>\n                        :\n                        null\n                    }\n\n                    <ul>\n                        { players.map((player, i) => (\n                            <li key={ i }>{ player }</li>\n                        )) }\n                    </ul>\n                </div>\n\n                {/* generate pairs section - button shows unless uneven number of players entered and then the error <p> is displayed instead, once clicked and players even the shuffle <p> shows */}\n                <div className='pairs'>\n                    { players.length % 2 !== 0 && players.length > 0 ? \n                        <p className=\"error\">Add another player to make it an even number!</p>\n                        :\n                        <button onClick={ this.handlePairs }>Generate Pairs</button>   \n                    }\n\n                    { clicked && players.length % 2 === 0  && players.length > 0 ? \n                        <p>Click again to shuffle the pairs</p>\n                        :\n                        null\n                    }\n                </div>\n\n                {/* section that displays the pairings after generate pairings has been clicked, vs <p> shows as long as column 1 is not empty */}\n                <div className='columns'>\n                    <ul className='column1'>\n                        { this.state.column1.map((player, i) => (\n                            <li key={ i }>{ player }</li>\n                        )) }\n                    </ul>\n                    \n                    { column1.length > 0 ?\n                        <p className='vs'>vs.</p>\n                        :\n                        null\n                    }  \n\n                    <ul className='column2'>\n                        { this.state.column2.map((player, i) => (\n                            <li key={ i }>{ player }</li>\n                        )) }\n                    </ul>\n                </div>\n                \n                {/* start again button resets the page to intial state */}\n                <button className='refresh' onClick={ this.handleReset }>Start Again</button>\n            </>\n        );\n    }\n}\n\nexport default AddPlayer;","import React from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Addplayer from './components/AddPlayer';\n\nconst App = () => (\n\t<>\n\t\t<Header />\n\t\t<Addplayer />\n\t\t<Footer />\n\t</>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}